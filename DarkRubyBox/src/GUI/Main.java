/*
 * Main.java
 *
 * Created on __DATE__, __TIME__
 */

package GUI;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

import utils.Regex;
import common.XML;


/**
 *
 * @author  __USER__
 */
public class Main extends javax.swing.JFrame {
	private ArrayList<String> outputConfigs;
	private String configStorePath = "." + File.separator + "Config"
			+ File.separator + "OutputConfig";

	/** Creates new form Main */
	public Main() {
		initConfig();
		initComponents();
		centreWindow(this);
	}

	public static String removeExtension(String s) {

		String separator = System.getProperty("file.separator");
		String filename;

		// Remove the path upto the filename.
		int lastSeparatorIndex = s.lastIndexOf(separator);
		if (lastSeparatorIndex == -1) {
			filename = s;
		} else {
			filename = s.substring(lastSeparatorIndex + 1);
		}

		// Remove the extension.
		int extensionIndex = filename.lastIndexOf(".");
		if (extensionIndex == -1)
			return filename;

		return filename.substring(0, extensionIndex);
	}

	private String readSpecificFormat(String filename, String key) {
		Properties properties = new Properties();
		try {
			FileInputStream fileInputStream = new FileInputStream(filename);
			properties.load(fileInputStream);
			fileInputStream.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return properties.getProperty(key);
	}

	private void writeSpecificFormat(String filename, String key, String value) {
		Properties properties = new Properties();
		try {
			properties.load(new FileInputStream(filename));
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		properties.setProperty(key, value);
	}

	private void initConfig() {
		File dir = new File(configStorePath);
		File[] files = dir.listFiles(new FilenameFilter() {
			public boolean accept(File dir, String name) {
				return name.toLowerCase().endsWith(".properties");
			}
		});

		outputConfigs = new ArrayList<String>();
		for (int i = 0; i < files.length; i++) {
			outputConfigs.add(removeExtension(files[i].getName()));
			//System.out.println(files[i].getName());
		}
		//outputConfigs.toArray(new String[ outputConfigs.size() ]);
	}
	
	public static void centreWindow(JFrame frame) {
	    Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
	    int x = (int) ((dimension.getWidth() - frame.getWidth()) / 2);
	    int y = (int) ((dimension.getHeight() - frame.getHeight()) / 2);
	    frame.setLocation(x, y);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	//GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		inputFileLabel = new javax.swing.JLabel();
		inputFilePathText = new javax.swing.JTextField();
		inputFileChooseButton = new javax.swing.JButton();
		outputFileLabel = new javax.swing.JLabel();
		outputFilePathText = new javax.swing.JTextField();
		outputFormatLabel = new javax.swing.JLabel();
		outputFormats = new javax.swing.JComboBox();
		newOutputFormatButton = new javax.swing.JButton();
		editCurrentOutputFormatButton = new javax.swing.JButton();
		saveCurrentOutputFormatButton = new javax.swing.JButton();
		DeleteCurrentOutputFormatButton = new javax.swing.JButton();
		outputFormatNameLabel = new javax.swing.JLabel();
		outputFormatNameText = new javax.swing.JTextField();
		kanjiFormatLabel = new javax.swing.JLabel();
		kanjiFormatText = new javax.swing.JTextField();
		kanaFormatLabel = new javax.swing.JLabel();
		kanaFormatText = new javax.swing.JTextField();
		othersFormatLabel = new javax.swing.JLabel();
		othersFormatText = new javax.swing.JTextField();
		progressBar = new javax.swing.JProgressBar();
		kanjiGradeLabel = new javax.swing.JLabel();
		kanjiGrade = new javax.swing.JComboBox();
		generateAssButton = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Dark Ruby Box");
		setResizable(false);

		inputFileLabel.setText("Input File:");

		inputFilePathText
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						inputFilePathTextActionPerformed(evt);
					}
				});

		inputFileChooseButton.setText("...");
		inputFileChooseButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						inputFileChooseButtonActionPerformed(evt);
					}
				});

		outputFileLabel.setText("Output File:");

		outputFilePathText.setEditable(false);

		outputFormatLabel.setText("Output Format:");

		outputFormats.setModel(new javax.swing.DefaultComboBoxModel(
				outputConfigs.toArray(new String[outputConfigs.size()])));
		outputFormats.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				outputFormatsActionPerformed(evt);
			}
		});

		newOutputFormatButton.setText("New");
		newOutputFormatButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						newOutputFormatButtonActionPerformed(evt);
					}
				});

		editCurrentOutputFormatButton.setText("Edit");
		editCurrentOutputFormatButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						editCurrentOutputFormatButtonActionPerformed(evt);
					}
				});

		saveCurrentOutputFormatButton.setText("Save");
		saveCurrentOutputFormatButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						saveCurrentOutputFormatButtonActionPerformed(evt);
					}
				});

		DeleteCurrentOutputFormatButton.setText("Del");
		DeleteCurrentOutputFormatButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						DeleteCurrentOutputFormatButtonActionPerformed(evt);
					}
				});

		outputFormatNameLabel.setText("Output Format Name:");

		outputFormatNameText.setEditable(false);
		outputFormatNameText.setText((String) outputFormats.getItemAt(0));

		kanjiFormatLabel.setText("Kanji Format:");

		kanjiFormatText.setEditable(false);
		kanjiFormatText.setText(readSpecificFormat(configStorePath
				+ File.separator + outputFormats.getItemAt(0) + ".properties",
				"KanjiFormat"));
		kanjiFormatText.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				kanjiFormatTextActionPerformed(evt);
			}
		});

		kanaFormatLabel.setText("Kana Format:");

		kanaFormatText.setEditable(false);
		kanaFormatText.setText(readSpecificFormat(configStorePath
				+ File.separator + outputFormats.getItemAt(0) + ".properties",
				"KanaFormat"));
		kanaFormatText.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				kanaFormatTextActionPerformed(evt);
			}
		});

		othersFormatLabel.setText("Others Format:");

		othersFormatText.setEditable(false);
		othersFormatText.setText(readSpecificFormat(configStorePath
				+ File.separator + outputFormats.getItemAt(0) + ".properties",
				"OthersFormat"));

		kanjiGradeLabel.setText("Grade:");

		kanjiGrade.setModel(new javax.swing.DefaultComboBoxModel(new String[] {
				"1", "2", "3", "4", "5", "6", "7", "8" }));

		generateAssButton.setText("Generate");
		generateAssButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						generateAssButtonActionPerformed(evt);
					}
				});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(
														layout.createSequentialGroup()
																.addComponent(
																		outputFilePathText,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		884,
																		Short.MAX_VALUE)
																.addContainerGap())
												.addGroup(
														layout.createSequentialGroup()
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.LEADING)
																				.addComponent(
																						inputFileLabel)
																				.addComponent(
																						outputFileLabel)
																				.addGroup(
																						javax.swing.GroupLayout.Alignment.TRAILING,
																						layout.createSequentialGroup()
																								.addGroup(
																										layout.createParallelGroup(
																												javax.swing.GroupLayout.Alignment.TRAILING)
																												.addGroup(
																														javax.swing.GroupLayout.Alignment.LEADING,
																														layout.createSequentialGroup()
																																.addComponent(
																																		inputFilePathText,
																																		javax.swing.GroupLayout.PREFERRED_SIZE,
																																		828,
																																		javax.swing.GroupLayout.PREFERRED_SIZE)
																																.addPreferredGap(
																																		javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																																.addComponent(
																																		inputFileChooseButton,
																																		javax.swing.GroupLayout.PREFERRED_SIZE,
																																		30,
																																		javax.swing.GroupLayout.PREFERRED_SIZE))
																												.addGroup(
																														layout.createSequentialGroup()
																																.addGroup(
																																		layout.createParallelGroup(
																																				javax.swing.GroupLayout.Alignment.TRAILING)
																																				.addGroup(
																																						javax.swing.GroupLayout.Alignment.LEADING,
																																						layout.createSequentialGroup()
																																								.addComponent(
																																										progressBar,
																																										javax.swing.GroupLayout.PREFERRED_SIZE,
																																										617,
																																										javax.swing.GroupLayout.PREFERRED_SIZE)
																																								.addGap(18,
																																										18,
																																										18)
																																								.addComponent(
																																										kanjiGradeLabel)
																																								.addPreferredGap(
																																										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																																								.addComponent(
																																										kanjiGrade,
																																										javax.swing.GroupLayout.PREFERRED_SIZE,
																																										javax.swing.GroupLayout.DEFAULT_SIZE,
																																										javax.swing.GroupLayout.PREFERRED_SIZE)
																																								.addPreferredGap(
																																										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																																								.addComponent(
																																										generateAssButton,
																																										javax.swing.GroupLayout.DEFAULT_SIZE,
																																										124,
																																										Short.MAX_VALUE))
																																				.addGroup(
																																						layout.createSequentialGroup()
																																								.addGroup(
																																										layout.createParallelGroup(
																																												javax.swing.GroupLayout.Alignment.LEADING)
																																												.addComponent(
																																														outputFormatLabel)
																																												.addComponent(
																																														outputFormatNameLabel)
																																												.addComponent(
																																														kanjiFormatLabel)
																																												.addComponent(
																																														kanaFormatLabel)
																																												.addComponent(
																																														othersFormatLabel))
																																								.addPreferredGap(
																																										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																																								.addGroup(
																																										layout.createParallelGroup(
																																												javax.swing.GroupLayout.Alignment.LEADING)
																																												.addComponent(
																																														othersFormatText,
																																														javax.swing.GroupLayout.DEFAULT_SIZE,
																																														689,
																																														Short.MAX_VALUE)
																																												.addComponent(
																																														kanaFormatText,
																																														javax.swing.GroupLayout.DEFAULT_SIZE,
																																														689,
																																														Short.MAX_VALUE)
																																												.addComponent(
																																														kanjiFormatText,
																																														javax.swing.GroupLayout.DEFAULT_SIZE,
																																														689,
																																														Short.MAX_VALUE)
																																												.addComponent(
																																														outputFormatNameText,
																																														javax.swing.GroupLayout.DEFAULT_SIZE,
																																														689,
																																														Short.MAX_VALUE)
																																												.addGroup(
																																														javax.swing.GroupLayout.Alignment.TRAILING,
																																														layout.createSequentialGroup()
																																																.addComponent(
																																																		outputFormats,
																																																		0,
																																																		375,
																																																		Short.MAX_VALUE)
																																																.addPreferredGap(
																																																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																																																.addComponent(
																																																		newOutputFormatButton)
																																																.addPreferredGap(
																																																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																																																.addComponent(
																																																		editCurrentOutputFormatButton)
																																																.addPreferredGap(
																																																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																																																.addComponent(
																																																		saveCurrentOutputFormatButton)
																																																.addPreferredGap(
																																																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																																																.addComponent(
																																																		DeleteCurrentOutputFormatButton)))))
																																.addGap(15,
																																		15,
																																		15)))
																								.addPreferredGap(
																										javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
																.addGap(0, 0, 0)))));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(inputFileLabel)
								.addGap(14, 14, 14)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(
														inputFilePathText,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														31, Short.MAX_VALUE)
												.addComponent(
														inputFileChooseButton))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addComponent(outputFileLabel)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(outputFilePathText,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(29, 29, 29)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(outputFormatLabel)
												.addComponent(
														outputFormats,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(
														newOutputFormatButton)
												.addComponent(
														editCurrentOutputFormatButton)
												.addComponent(
														saveCurrentOutputFormatButton)
												.addComponent(
														DeleteCurrentOutputFormatButton))
								.addGap(17, 17, 17)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(
														outputFormatNameLabel)
												.addComponent(
														outputFormatNameText,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(kanjiFormatLabel)
												.addComponent(
														kanjiFormatText,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(kanaFormatLabel)
												.addComponent(
														kanaFormatText,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(othersFormatLabel)
												.addComponent(
														othersFormatText,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(
														progressBar,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														33, Short.MAX_VALUE)
												.addGroup(
														layout.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
																.addComponent(
																		kanjiGradeLabel)
																.addComponent(
																		kanjiGrade,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.PREFERRED_SIZE)
																.addComponent(
																		generateAssButton)))
								.addContainerGap()));

		pack();
	}// </editor-fold>
	//GEN-END:initComponents

	private void generateAssButtonActionPerformed(java.awt.event.ActionEvent evt) {
		ArrayList<String> lines = new ArrayList<String>();
		String filename = inputFilePathText.getText();
		String outputFilename = outputFilePathText.getText();
		String grade = (String) kanjiGrade.getSelectedItem();
		String outputFormatName = outputFormatNameText.getText();
		String configFilename = configStorePath + File.separator + outputFormatName
				+ ".properties";
		String curLine = "";
		try {
			BufferedReader bufferedReader = new BufferedReader(
					new InputStreamReader(new FileInputStream(filename),
							"UTF-8"));
			while ((curLine = bufferedReader.readLine()) != null) {
				lines.add(curLine);

			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		Pattern pattern = Pattern
				.compile("(^Dialogue:\\s*\\d,\\d:\\d\\d:\\d\\d\\.\\d\\d,\\d:\\d\\d:\\d\\d\\.\\d\\d,.*?,.*?,\\d*?,\\d*?,\\d*?,.*?,)(.*)");

		int lineCount = 0;
		XML.readAPPID();
		File xmlStoreDir = new File("."+File.separator+"Temp");
		for(File file: xmlStoreDir.listFiles()) file.delete();
		
		for (int i = 0; i < lines.size(); i++) {
			Matcher matcher = pattern.matcher(lines.get(i));
			if (matcher.find()) {
				++lineCount;
				String prelinePart = matcher.group(1);
				String lineText = matcher.group(2);
				
				Pattern spaceSplitPattern = Pattern.compile(Regex.UNICODE_SPACES);
				
				String[] splitText = spaceSplitPattern.split(lineText); 
				
				boolean first = true;
				/*
				System.out.println(lineText);
				for(int j=0; j<splitText.length; j++) {
					System.out.println(j+" "+splitText[j]);
				}*/
				
				for(int j=0; j<splitText.length; j++){
					String storePath="."+File.separator+"Temp"+File.separator + "line" + String.valueOf(lineCount)+"part"+String.valueOf(j)+".xml";
					if(splitText[j].equals("")==false) {
						System.out.println(splitText[j]);
						XML.fetch(splitText[j], grade, storePath);
						
						if(first) {
							lineText=XML.toFormatString(configFilename, storePath);
							first = false;
						}else{
							lineText=lineText+" "+XML.toFormatString(configFilename, storePath);
						}	
					}
				}
				
				/*
				XML.fetch(lineText, grade, storePath);
				lineText=XML.toFormatString(configFilename,storePath);
				*/
				lines.set(i, prelinePart+lineText);
			}
			progressBar.setValue((i + 1) * 100 / lines.size());
		}
		try {
			//File file = new File(outputFilename);
			BufferedWriter output = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFilename),"UTF-8"));;
			for (int i = 0; i < lines.size(); i++) {
				output.write(lines.get(i)
						+ System.getProperty("line.separator"));
			}
			output.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void DeleteCurrentOutputFormatButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		String outputFormatName = outputFormatNameText.getText();
		String filename = configStorePath + File.separator + outputFormatName
				+ ".properties";
		File file = new File(filename);
		try {
			Files.delete(Paths.get(filename));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		initConfig();
		outputFormats.setModel(new javax.swing.DefaultComboBoxModel(
				outputConfigs.toArray(new String[outputConfigs.size()])));
		outputFormats.setSelectedIndex(0);
		outputFormatsActionPerformed(evt);
	}

	private void saveCurrentOutputFormatButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		String outputFormatName = outputFormatNameText.getText();
		String kanjiFormat = kanjiFormatText.getText();
		String kanaFormat = kanaFormatText.getText();
		String othersFormat = othersFormatText.getText();
		String filename = configStorePath + File.separator + outputFormatName
				+ ".properties";
		Properties properties = new Properties();
		properties.setProperty("KanjiFormat", kanjiFormat);
		properties.setProperty("KanaFormat", kanaFormat);
		properties.setProperty("OthersFormat", othersFormat);
		try {
			FileOutputStream fileOutputStream = new FileOutputStream(filename);
			properties.store(fileOutputStream, "");
			fileOutputStream.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		outputFormatNameText.setEditable(false);
		kanjiFormatText.setEditable(false);
		kanaFormatText.setEditable(false);
		othersFormatText.setEditable(false);
		initConfig();
		outputFormats.setModel(new javax.swing.DefaultComboBoxModel(
				outputConfigs.toArray(new String[outputConfigs.size()])));
		outputFormats.setSelectedItem(outputFormatName);
	}

	private void kanaFormatTextActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void outputFormatsActionPerformed(java.awt.event.ActionEvent evt) {
		String currentSelectedOutputFormat = (String) outputFormats
				.getSelectedItem();
		outputFormatNameText.setText(currentSelectedOutputFormat);
		outputFormatNameText.setEditable(false);
		String currentFormatPath = configStorePath + File.separator
				+ currentSelectedOutputFormat + ".properties";

		kanjiFormatText.setText(readSpecificFormat(currentFormatPath,
				"KanjiFormat"));
		kanjiFormatText.setEditable(false);
		kanaFormatText.setText(readSpecificFormat(currentFormatPath,
				"KanaFormat"));
		kanaFormatText.setEditable(false);
		othersFormatText.setText(readSpecificFormat(currentFormatPath,
				"OthersFormat"));
		othersFormatText.setEditable(false);
	}

	private void editCurrentOutputFormatButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		outputFormatNameText.setEditable(true);
		kanjiFormatText.setEditable(true);
		kanaFormatText.setEditable(true);
		othersFormatText.setEditable(true);
	}

	private void newOutputFormatButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		outputFormatNameText.setEditable(true);
		outputFormatNameText.setText("");

		kanjiFormatText.setEditable(true);
		kanjiFormatText.setText("");

		kanaFormatText.setEditable(true);
		kanaFormatText.setText("");

		othersFormatText.setEditable(true);
		othersFormatText.setText("");
	}

	private void kanjiFormatTextActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your han
	}

	private void inputFileChooseButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		FileFilter filter = new FileNameExtensionFilter(
				"Advanced SubStation Alpha subtitle format", "ass");
		JFileChooser fileChooser = new JFileChooser();

		fileChooser.addChoosableFileFilter(filter);
		fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
		int returnValue = fileChooser.showOpenDialog(null);
		if (returnValue == JFileChooser.APPROVE_OPTION) {
			File selectedFile = fileChooser.getSelectedFile();
			inputFilePathText
					.setText(selectedFile.getAbsolutePath().toString());
			String outputPathString = selectedFile.getParent();
			String outputFileNameString = removeExtension(selectedFile
					.getName()) + "-furigana.ass";
			outputFilePathText.setText(outputPathString + File.separator
					+ outputFileNameString);
		}
	}

	private void inputFilePathTextActionPerformed(java.awt.event.ActionEvent evt) {

	}
	

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new Main().setVisible(true);
			}
		});
	}

	//GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JButton DeleteCurrentOutputFormatButton;
	private javax.swing.JButton editCurrentOutputFormatButton;
	private javax.swing.JButton generateAssButton;
	private javax.swing.JButton inputFileChooseButton;
	private javax.swing.JLabel inputFileLabel;
	private javax.swing.JTextField inputFilePathText;
	private javax.swing.JLabel kanaFormatLabel;
	private javax.swing.JTextField kanaFormatText;
	private javax.swing.JLabel kanjiFormatLabel;
	private javax.swing.JTextField kanjiFormatText;
	private javax.swing.JComboBox kanjiGrade;
	private javax.swing.JLabel kanjiGradeLabel;
	private javax.swing.JButton newOutputFormatButton;
	private javax.swing.JLabel othersFormatLabel;
	private javax.swing.JTextField othersFormatText;
	private javax.swing.JLabel outputFileLabel;
	private javax.swing.JTextField outputFilePathText;
	private javax.swing.JLabel outputFormatLabel;
	private javax.swing.JLabel outputFormatNameLabel;
	private javax.swing.JTextField outputFormatNameText;
	private javax.swing.JComboBox outputFormats;
	private javax.swing.JProgressBar progressBar;
	private javax.swing.JButton saveCurrentOutputFormatButton;
	// End of variables declaration//GEN-END:variables

}